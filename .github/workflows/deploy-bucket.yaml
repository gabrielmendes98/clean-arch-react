name: deploy-bucket
on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'patch'
          - 'minor'
          - 'major'

jobs:
  test-coverage:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Tests
        run: yarn test:cov

  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Lint
        run: yarn lint

  sonar-scan:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy-s3:
    runs-on: ubuntu-22.04
    needs: [test-coverage, lint, sonar-scan]
    env:
      VERSION_TYPE: ${{ inputs.version-type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.CLEAN_ARCH_CI }}

      - name: Setup git user
        uses: fregante/setup-git-user@v2

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Cache node_modules
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Upgrade prerelease version
        if: ${{ github.ref != 'refs/heads/master' }}
        run: |
          FORMATTED_BRANCH_NAME=$(sed "s/\//-/g" <<< $(git branch --show-current) | tr '[:upper:]' '[:lower:]')
          yarn version --pre$VERSION_TYPE --preid $FORMATTED_BRANCH_NAME
        # Format the branch name by replacing slashes with dashes, set to lower case and increment the prerelease version based on the version type and branch name

      - name: Upgrade release version
        if: ${{ github.ref == 'refs/heads/master' }}
        run: yarn version --$VERSION_TYPE
        # Increment the release version based on the version type

      - name: Set bucket name
        run: |
          if ${{ github.ref == 'refs/heads/master' }}
          then
            echo S3_BUCKET_NAME=${{ vars.S3_MASTER_BUCKET_PREFIX }}-$(yarn version --non-interactive | grep "Current version:" | awk '{ print $4 }') >> $GITHUB_ENV
          else
            echo S3_BUCKET_NAME=$(yarn version --non-interactive | grep "Current version:" | awk '{ print $4 }' | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          fi
        # Set the S3 bucket name based on the current version, transformed to lowercase

      - name: Build
        run: yarn build

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
        # Configure AWS credentials for interacting with S3

      - name: Create and configure S3 bucket
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region ${{ vars.AWS_REGION }}
          aws s3api put-public-access-block \
            --bucket ${{ env.S3_BUCKET_NAME }} \
            --public-access-block-configuration "BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false"
          aws s3api put-bucket-policy --bucket ${{ env.S3_BUCKET_NAME }} --policy "{
              \"Version\": \"2012-10-17\",
              \"Statement\": [
                  {
                      \"Sid\": \"PublicReadGetObject\",
                      \"Effect\": \"Allow\",
                      \"Principal\": \"*\",
                      \"Action\": \"s3:GetObject\",
                      \"Resource\": \"arn:aws:s3:::${{ env.S3_BUCKET_NAME }}/*\"
                  }
              ]
            }"
          aws s3 website "s3://${{ env.S3_BUCKET_NAME }}" --index-document index.html --error-document index.html
        # Create and configure the S3 bucket for hosting the project, with public access, and set the website index and error documents to index.html

      - name: Upload files to S3
        run: |
          aws s3 sync ./build s3://${{ env.S3_BUCKET_NAME }}
        # Upload project build files to the S3 bucket

      - name: Push version upgrade
        run: |
          git push
          git push origin --tags
        # Push the version upgrade commits and tags to the repository

      - name: Notify slack
        run: echo "${{ github.actor }} deployed version $(yarn version --non-interactive | grep "Current version:" | awk '{ print $4 }') to S3 bucket http://${{ env.S3_BUCKET_NAME }}.s3-website-${{ vars.AWS_REGION }}.amazonaws.com"
